def div_to_str(divisor,length):
    return str(10**length//divisor).strip("0")

def first(iterable, default):
    try:
        return next(iterable)
    except StopIteration:
        return default

def chunk(string, length):
    return (string[p:p+length] for p in range(0,len(string)-length+1,length))

def is_recur_seq(num, length):
    return all(digits == num[:length] for digits in chunk(num, length))

def recuring_seq(num):
    return first((num[:length] for length in range(1,len(num)//2) 
                  if is_recur_seq(num,length)), "")

def recuring_across_pos(num):
    return max((recuring_seq(num[pos:]) 
                for pos in range(min(10,len(num)*3//4+1))), 
               key=len)

recuring_numbers = ((n, recuring_across_pos(div_to_str(n,3000))) 
                    for n in range(1,1000))

print(max(recuring_numbers), key=(lambda x: len(x[1]))))

# > (983,'1017293997965412004069175991861648016276703967446592065106815869786368260427263479145473041709053916581892166836215666327568667344862665310274669379450661241098677517802644964394710071210579857578840284842319430315361139369277721261444557477110885045778229908443540183112919633774160732451678535096642929806714140386571719226856561546286876907426246185147507629704984740590030518819938962360122075279755849440488301119023397761953204476093591047812817904374364191251271617497456765005086469989827060020345879959308240081383519837232960325534079348931841302136317395727365208545269582909460834181078331637843336724313326551373346897253306205493387589013224821973550356052899287894201424211597151576805696846388606307222787385554425228891149542217700915564598168870803662258392675483214649033570701932858596134282807731434384537131230925737538148524923702950152594099694811800610376398779247202441505595116988809766022380467955239064089521871820956256358087487283825025432349949135300')
