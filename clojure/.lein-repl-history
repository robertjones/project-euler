(math/lcd 10 20)
(require '[clojure.math.numeric-tower :as math])
(math/lcd 10 20)
(math/lcm 10 20)
(math/lcm 10 20 30)
(reduce math/lcm (range 1 11))
(reduce math/lcm (range 1 21))
exit
text
(text)
exit
(problem-18)
exit
(problem18/text)
(def text
"3
7 4
2 4 6
8 5 9 3")
(defn text->triangle [text]
  (string/split text #"\n"))
(clojure.string/split text #"\n")
(defn text->triangle [text]
  (map #(apply read-string (clojure.string/split % #"")) (clojure.string/split text #"\n"))
(text->triangle text)
))
(defn text->triangle [text]
  (map 
    #(apply read-string (clojure.string/split % #"")) 
    (clojure.string/split text #"\n")))
(text->triangle text)
(defn text->triangle [text]
  (map
    #(map read-string (clojure.string/split % #""))
    (clojure.string/split text #"\n")))
(text->triangle text)
text
(clojure.string/split text #"\n")
(defn text->triangle [text]
  (map
    #(map read-string (clojure.string/split % #" "))
    (clojure.string/split text #"\n")))
(text->triangle text)
(def text
"3
7 4
2 4 6
8 5 9 3")
(defn parse-int [x] (int (bigint x)))
(defn text->grid [text]
  (vec (map #(vec (map parse-int (string/split % #" ")))
       (string/split text #"\n"))))
(defn text->grid [text]
  (vec (map #(vec (map parse-int (clojure.string/split % #" ")))
       (clojure.string/split text #"\n"))))
(text->grid text)
(reverse (text->grid text)
)
(doc reduce)
(index (1 2 3))
(indexed (1 2 3)
)
(doc partition)
(def acc [1 2 3 4 5 6 7])
acc
(partition acc 2 1)
(partition acc 2)
(partition 2 1 acc)
(partition 2 1 0 acc)
(partition 2 1 '0 acc)
(partition 2 1 [0] acc)
(map max (partition 2 1 [0] acc))
(apply max (partition 2 1 [0] acc))
(map (apply max) (partition 2 1 [0] acc))
(map (partial apply max) (partition 2 1 [0] acc))
(defn path-step [acc step]
  (map +
       step
       (map (partial apply max) (partition 2 1 acc)))
)
(path-step [1 2 3 4 5 6] [1 2 3 4 5])
(defn max-path [grid]
  (reduce path-step (reverse grid))
)
(max-path (text->grid text))
(apply max (23))
(max (23))
(appl ymax (23 21))
(appl max (23 21))
(apply max (23 21))
(apply max '(23))
(defn max-path [grid]
  (apply max (reduce path-step (reverse grid)))
)
(max-path (text->grid text))
(def text
"75
95 64
17 47 82
18 35 87 10
20 04 82 47 65
19 01 23 75 03 34
88 02 77 73 07 63 67
99 65 04 28 06 16 70 92
41 41 26 56 83 40 80 70 33
41 48 72 33 47 32 37 16 94 29
53 71 44 65 25 43 91 52 97 51 14
70 11 33 28 77 73 17 78 39 68 17 57
91 71 52 38 17 14 91 43 58 50 27 29 48
63 66 04 68 89 53 67 30 73 16 69 87 40 31
04 62 98 27 23 09 70 98 73 93 38 53 60 04 23")
(max-path (text->grid text))
(defn text->grid [text]
  (map
    #(map parse-int (clojure.string/split % #" "))
    (clojure.string/split text #"\n")))
(text->grid text)
(max-path (text->grid text))
